---
title: 20150723
layout: outline
---

## All

### Warm Up (8:30 - 9:00)

To covert nearly any number into a palindromic number you operate by reversing the digits and
adding and then repeating the steps until you get a palindromic number. Some require many steps.

e.g. 24 gets palindromic after 1 steps: 66 -> 24 + 42 = 66

while 28 gets palindromic after 2 steps: 121 -> 28 + 82 = 110, so 110 + 11 (110 reversed) = 121.

Note that, as an example, 196 never gets palindromic (at least according to researchers, at least never in
reasonable time). Several numbers never appear to approach being palindromic.

Input Description

You will be given a number, one per line. Example:

11

68

Output Description

You will describe how many steps it took to get it to be palindromic, and what the resulting palindrome is.

Example:

11 gets palindromic after 0 steps: 11

68 gets palindromic after 3 steps: 1111


### Student Advisory Board (4:15 - 5:15)

Location TBA.


## 1502

### Intra-Cohort Check-Ins (9:00 - 10:00)

### Project Work Time (10:00 - 12:00)

### Whole-Group Check In. (1:00 - 2:00)

## Project Work Time (2:00 - 4:00)


## 1503

### Project Work Time (9:00 - 12:00)

### Feed Engine Evaluations (1:00 - 4:00)

#### With Jorge

* 1:00 - Rick Bacci
* 1:20 - Vanessa Gomez
* 1:40 - Drew Reynolds
* 2:00 - Lev Kravinsky
* 2:20 - BREAK
* 2:40 - Erik Butcher
* 3:00 - Chelsea Worrel
* 3:20 - Dave Maurer


#### With Horace

* 1:00 - Max Tedford
* 1:20 - Sally MacNicholas
* 1:40 - Brett Grigsby
* 2:00 - BREAK
* 2:20 - Margarett Ly
* 2:40 - Josh Cass
* 3:00 - Jamie Kawahara
* 3:20 - Jack Yeh


#### With Mike

* 2:20 - Rob Cornell
* 2:40 - Justin Holmes
* 3:00 - Whitney Hiemstra
* 3:20 - Morgan Miller
* 3:40 - Andrew Fink


## 1505

### Blogger Recap (9:00 - 9:30)

Recap Blogger with Josh! In Classroom C! Awesome!

### Feature Testing in Rails (9:30 - 10:30)

You have a special guest today, Nmuta Jones! Such excitement!

### Model Testing Custom and Built-in Validations (10:30 - 12:00)

Rachel takes over as you learn about more testing. This is the Best. Day. EVER.

### Work Time: Model Testing and Validations  (1:00 - 3:00)

Rachel will be on hand for questions.

### Contact Manager Kickoff and Work Time (3:00 - 4:00)

Only one student has ever completed Contact Manager. The Gauntlet has been thrown.

Remember to thank Josh for all the massive amounts of work he did to re-write Contact Manager.

Generations of Turing students have jobs because of this.


## 1507 - Foxtrot

Before 9:00, please have your code committed, pushed to GitHub, and the
URL [added to this submission file](https://github.com/turingschool/ruby-submissions/blob/master/1507/04-linked_lists.markdown).

### Linked List Evaluations - (9:00 - 12:00)

#### With Mike

* 9:00 - Mimi Schatz
* 9:15 - Travis Haby
* 9:30 - Bret Doucette
* 9:45 - Tyler Komoroske
* 10:00 - Rachel Parri
* 10:15 - BREAK
* 10:30 - Justin Pease
* 10:45 - Regis Boudinot
* 11:00 - Rose Kohn
* 11:15 - Chris Cenatiempo

#### With Jeff

* 9:00 - Michael Wong
* 9:15 - Nicole Hall
* 9:30 - Mary Beth Burch
* 9:45 - Chad Minnerath
* 10:00 - Jeff Ruane
* 10:15 - BREAK
* 10:30 - David Stinnette
* 10:45 - Rebekah Sosa
* 11:00 - Adam Jensen
* 11:15 - Jerrod Paul Junker

### Linked Lists and Insertion Sort (9:00 - 12:00)

When you're not being evaluated, we'd like you to play a bit with the idea
of Linked Lists. There's a neat sorting algorithm named Insertion Sort. Work on each
of these:

1. Read [the Insertion Sort Wikipedia article](https://en.wikipedia.org/wiki/Insertion_sort)
2. Read/work through [this Insertion Sort page on Khan Academy](https://www.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort)
3. Watch [this video from the CS50 course](https://www.youtube.com/watch?v=DFG-XuyPYUQ)

Then return to your Linked List code and...

* Create a branch with `git checkout -b insertion_sort`
* Create a `sorted_insert` which uses insertion sort to insert the new value into
the linked list at its correct position

It might look something like this:

```ruby
list = LinkedList.new
list.sorted_insert(5)
list.sorted_insert(2)
list.sorted_insert(8)
list.sorted_insert(6)
list.sorted_insert(7)
list.to_s # => "The list is currently 2-5-6-7-8"
```

Feel free to collaborate with other students on this exercise.

### Enigma Introduction (1:00 - 1:30)

Join Jeff in Classroom A to talk about Enigma. Please [read this project spec](https://github.com/JumpstartLab/curriculum/blob/master/source/projects/enigma.markdown)
before coming to this session.

You'll build the project in the following pairs:

* Rose Kohn & Rebekah Sosa
* Nicole Hall & Adam Jensen
* Mimi Schatz & Regis Boudinot
* Bret Doucette & Rachel Parri
* Mary Beth Burch & David Stinnette
* Chad Minnerath & Michael Wong
* Jeff Ruane & Jerrod Paul Junker
* Chris Cenatiempo & Justin Pease
* Rachel Parri & Tyler Komoroske
* Travis Haby & `nil`

We also have a two related projects that you might want to check out. If you and
your pair feel "highly-whelmed" by Enigma, it might be prudent to ramp up with these:

* [Encryptor](http://tutorials.jumpstartlab.com/projects/encryptor.html)
* [Cryptographer](https://github.com/turingschool/challenges/blob/master/cryptographer.markdown)

### Enigma Work Time (1:30 - 3:30)

Get started on the project!

### Foxtrot: Enigma Q and A (3:30 - 4:00)

Join Mike in Classroom A to answer your questions about the assignment, approach, etc.

## 1507 - Echo

### Enigma Work Time (9:00 - 12:00)

Get together with at least one other person and make sure you can decrypt and crack each other's
encrypted messages.

Before 12:00, please have your code committed, pushed to GitHub, and the
URL [added to this submission file](https://github.com/turingschool/ruby-submissions/blob/master/1507/05-enigma.markdown).

### Enigma Evaluations (1:00 - 3:00)

#### With Jeff

* 1:30 - Matt Hecker
* 1:50 - Russell Harms
* 2:10 - Alon Waisman
* 2:30 - Matt Ewell

#### With Mike

* 1:00 - George Hudson
* 1:20 - Justin Holzmann
* 1:40 - Ryan Asensio

### Playing with Objects (1:00 - 4:00)

This weekend you get a bit of a breather. Spend your time learning about and
playing with object oriented design.

1. Open [this assignment](https://github.com/turingschool/challenges/blob/master/poodr.markdown) focused on the "Practical Object Oriented Design with Ruby" book.
2. Follow the instructions for Part 1
3. Now actually take the time to implement these 15 classes in Ruby, even if they're
just little "stub" classes without much functionality. Can you stitch your classes/instances together in a meaningful way such that `Plane.new` would create
an interconnected web of objects?
4. Compare your work for (3) with at least one other student. Take the best of their
ideas and roll them back into your own work.
5. When you're happy with your `Plane`, complete the *Part 2* reading and implement
the printers to explore dependency injection.
