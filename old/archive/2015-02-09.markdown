---
title: 150209
layout: outline
---

## All

### Welcome 1502 (8:00 - 8:40)

Please take some time this morning to welcome and introduce yourself to our newest group of students: 1502.

### Electives (2:30 - 4:00)

This module, we're starting something new: electives. Each elective lasts three weeks.

#### Building a Binary Search Tree with Jeff

(Classroom C)

Binary search trees are a great opportunity to explore a fundamental CS data
structure, practice TDD and unit and integration levels, and think about algorithmic
complexity. In the first session we'll briefly go over how BSTs work, then create
working pairs to begin building. In the second session we'll check-in on progress
and experiment with the best and worst case scenarios for input data.

#### iOS Fundamentals with Steve

(Classroom A)

In this session, we'll cover the fundamentals of the Swift programming language as well as some of the very basics of building a application using Apple's frameworks. If you're planning on attending this session—make sure you install Xcode at lunch—you can find it on the Mac App Store.

#### Profiling the Performance of Ruby Code with Horace

(Classroom B)

Performance is an important part of good software engineering, but it's also easy
to complicate our code unnecessarily in the name of speeding it up. So how do we know
which improvements are worthwhile? In this elective we'll introduce some tools for
measuring the performance of our ruby code and pinpointing the portions that actually
need improvement. The first session will focus on ruby's built-in Benchmark library and
the powerful ruby-prof gem. The second session will look at some more extensive
"all-in-one" application profiling tools which can be useful for web apps.

#### Numberguesser in Go with Jorge

(Somewhere over the rainbow)

Go is cool. Let's learn it together. In this session we will install Go, try to get familiar with the syntax, and then rule the world. `import "ftw"`.

Resources:

* Install Go via [GVM](https://github.com/moovweb/gvm).
* [Golang](https://golang.org).
* [Go Book](http://www.golang-book.com).

#### Building a Gem with Josh Cheek

(The Big Workspace)

Material is [here](https://github.com/JoshCheek/elective-building-a-gem).

We're going to make a gem that has a program you can invoke on the commandline.
You'll give it a git repository and it will tell you how many non-blank lines
are in each file, as well as the total for the whole repository.

We'll cover:

* Working with gems
  * What libraries and gems are
  * The structure of the .gem format
  * How to install a gem you are building
  * How to version a gem
  * How to publish a gem
* How to make an executable
  * Where it goes, what it does
  * The `$PATH`
  * File permissions
  * Shebangs
  * The `$LOAD_PATH`
  * How to get command line arguments
  * How to print output and errors
* How to make the code
  * Where it goes
  * Load path namespacing
  * Constant namespacing
  * Mapping class names to file locations
* Test Driving our gem
  * Start with an acceptance/integration test
    * to give us confidence that we haven't broken anything
    * and flexibility to iterate and make changes
  * Using fixtures
  * Dropping down to unit tests
    * to get feedback about our design
    * to make it easy to verify features do what we expect, with minimal overhead
    * the thought process of writing tests
  * Our testing will follow what's I do in reality.
    I treat all religions with iconoclasm, TDD is no exception --
    we will test our code this way because it is incredibly effective,
    not because someone will shame us if we don't.

You will need to be comfortable working with basic Ruby classes like
arrays, enumerables, and strings -- I don't want our time to be eaten up
tripping over Ruby.

#### Fun with Hue Bulbs with Josh Mejia

(Staff Workspace)

Interactions between code and devices are becoming more and more prevalent and the possibilites are endless.
Read about the [Internet of Things](http://en.wikipedia.org/wiki/Internet_of_Things) for examples.
We'll start to dabble with these interactions by writing code that parses input from one source and
communicates its output using color by talking to [Hue Bulbs](http://www2.meethue.com/en-us/).
What you decide to build will be up to you. Some example apps if you need some inspiration:

1. Parse weather data provided by an API. Based on the temperature, change the color of the Hue Bulb.
2. Same as 1, but instead of using an API, use an Arduino to measure the temperature.
3. Let everyone around you see how great your test coverage is by changing color based
on measurements by Simplecov.
4. Same as 3 but for code quality using Hound.

## 1409

### Jet Fuel: Recap and Refactor (9:00 - 10:45)

#### Phase One: Pair Code Review

(15 minutes: 9:00 - 9:15)

Spend 15 minutes reviewing your partners code.

* Are any methods unclear to you?
* Can any methods be refactored? Do they seem overly verbose?
* Are there any private methods that could be extracted?
* Are there any opportunities to push logic down the stack?

Pairs (meet in Classroom B):

* Timothy Mee & Danny Glunz
* Chandra Carney & Alex Jensen
* Chase van Hekken & David Bayendor
* Zachary Routhier & Sam Kuhlmann
* Herbert Joseph & Gregory Narajka
* Kate Lane & Victoria Harrod & Travis Yoder

You can find everyone's repositories [here](https://github.com/turingschool/intermission-assignments/issues/1).

Open issues on your partners repository pointing to the exact lines you believe could/should be refactored.

#### Phase Two: Refactor

(45 minutes: 9:15 - 10:00)

As a pair, choose a method to refactor based on the issues you opened earlier.

* Does this method have a test? If not, write one first.
* Refactor the method, ensuring the test passes.

Pairs (meet in Classroom B):

* Timothy Mee & Danny Glunz
* Chandra Carney & Alex Jensen
* Chase van Hekken & David Bayendor
* Zachary Routhier & Sam Kuhlmann
* Herbert Joseph & Gregory Narajka
* Kate Lane & Victoria Harrod & Travis Yoder

#### Phase Three: Instructor Discussion

(45 minutes: 10:00 - 10:45)

##### With Horace

Join Horace in Classroom B to discuss challenges using background workers or creating a wrapper gem.

### Mocking and Stubbing (10:45 - 12:00)

Meet up with Horace in Classroom B to discuss the finer points of testing things that seem hard to test.

### JavaScript Book Club and General Discussion (1:00 - 1:45)

Meet Steve in Classroom C to talk about _Speaking JavaScript_ and _JavaScript Allongé_. We'll also have a general discussion about any JavaScript questions you might have.

### Game Time Kick Off (1:45 - 2:30)

Stick around with Steve in Classroom C to talk about your first project for the module: [Game Time](https://github.com/turingschool/lesson_plans/blob/master/ruby_04-apis_and_scalability/gametime_project.markdown).

* Herbert Joseph & Alex Jensen
* Kate Lane & Sam Kuhlmann
* Gregory Narajka & Victoria Harrod
* Chase van Hekken & Zachary Routhier
* Chandra Carney & Travis Yoder
* Timothy Mee & David Bayendor

## 1410

### Understanding Multi-tenancy (9:00 - 12:00)

Join Jorge in Classroom C to talk about being a Rails landlord.

### Kickoff: The Pivot (1:00 - 1:45)

Join Jorge in Big Workspace to kick off your new—and kind of old—project: The Pivot.

Here are your teams:

* Laura & Brandon's codebase: Laura Whalin, Brandon Mrsny, Rich Shea, Alexandra Robinson, Konr Josef Larson
* Krista & Nathan's codebase: Krista A Nelson, Nathan Owsiany, Bhargavi Satpathy, Scott Crawford
* Orion & Jeffrey's codebase: Orion Osborn, Jeffrey Wan, Michael Dao, Emily Berkeley, Adam Smith
* Kit & Bryce's codebase: Kit Pearson, Bryce Holcomb, Lydia Shafer, Chris Luhring

### The Weekly Iteration (1:45 - 2:30)

Stick around with Josh in the Big Workspace to build some skills.

## 1412

### Introduction to Sinatra (9:00 - 9:30)

Join Rachel in Classroom A to meet Hoboken, NJ's _second_-most famous former-resident.

### Taskmanager Q&A and Review (9:30 - 11:00)

Stick around with Rachel in Classroom A to talk about managing some tasks.

### HTML/CSS Review (11:00 - 12:00)

Josh will review some hyper-text markup language and cascading style sheets.

Clone the Turing Bistro [repo](https://github.com/turingschool-examples/turing-bistro)

### Taskmanager HTML/CSS Workshop (1:00 - 2:30)

It's like the two morning sessions combined. Dig it in Classroom C. Find the outline [here](https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/html_css_task_manager.markdown).

### Homework

* Finish styling TaskManager `index.erb`, `show.erb`, `new.erb`, and `dashboard.erb`
* Finish styling the Turing Bistro
* Research: What is CRUD (in the programming sense of the word)? What CRUD functionality do we have in TaskManager already and what are we missing? What routes/views/methods would we need to add in order to have full CRUD functionality?

## 1502

### Classroom Building (9:00 - 11:00)

Meet with Jeff in the Big Workspace.

### Machine Setup (11:00 - 12:00)

Stick around with Jeff in the Big Workspace to get yourself ready to program all the things.

### Student Introduction Lunch (12:00 - 1:00)

Meet up with the staff and your fellow students in the Big Workspace to meet, greet, and eat.

### How to Learn at Turing (1:00 - 2:30)

Ideally, you came to Turing to learn—Join Jeff in Classroom B to learn how to learn at Turing.
