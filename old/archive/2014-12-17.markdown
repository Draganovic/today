---
title: 141217
layout: outline
---

## All

### Warm-Up (8:30 - 8:50)

Let's try to solve [this logic problem](http://cl.ly/2e42381b1O3G) in our posses.

## 1407

### Personas for UX (9:00 - 10:00)

Join Jorge in Classroom A to talk about his multiple personas.

### Wireframing for UX (10:00 - 11:00)

Stick around with Jorge in Classroom A to discuss wireframing.

### Third-Party JavaScript (11:00 - 12:00)

Steve will stop by Classroom B to talk about JavaScript libraries design to make your life easier:

* [Underscore.js][underscore], [Lo-dash][ld], [Underscore.String.js][underscore-string]
* [Moment.js][moment]
* [Numeral.js][numeral]
* [Modernizr.js][modernizr]

[underscore]: http://underscorejs.org
[ld]: https://lodash.com
[underscore-string]: https://github.com/epeli/underscore.string#readme
[moment]: http://momentjs.com
[numeral]: http://numeraljs.com
[modernizr]: http://modernizr.com

### Project Work Time (1:00 - 4:00)

Steve is on hand for questions.

## 1409

### Agile Stories & Project Planning (9:00 - 10:30)

Join Horace in Classroom B to tell some stories and plan some projects.

### Revisiting Git Workflow (10:30 - 12:00)

Revisit your Git workflow with Horace in Classroom B.

### Project Work Time (1:00 - 4:00)

Horace is on hand for questions.

## 1410

### IdeaBox Work Time (9:00 - 12:00)

Rachel will be on hand for questions and ideas for you to box.

### Testing Sinatra Applications (1:00 - 3:00)

Join Rachel in Classroom B to talk about testing Sinatra applications. Find the lesson outline [here](https://github.com/turingschool/lesson_plans/blob/master/ruby_02-web_applications_with_ruby/testing_sinatra_applications.markdown).

### IdeaBox Work Time (3:00 - 4:00)

It's time to apply some of the lessons learned today.

## 1412

### Arrays and Hashes (9:00 - 10:30)

Join Jeff in Classroom C to [talk about arrays and hashes](https://github.com/turingschool/lesson_plans/blob/master/ruby_01-object_oriented_programming_with_ruby/arrays_and_hashes.markdown).

### Credit Check Recap (10:30 - 12:00)

Continue in Classroom C with Josh Mejia where you'll work on yesterday's Credit Check assignment.

#### Part 1: Arrays & Pairing

Now that you've had an introduction to Arrays, try putting them to use. Get together with a pair Josh assigns and re-implement Credit Check, from scratch, using Arrays where helpful.

#### Part 2: Building a Solution

For the last segment of the morning, Josh will walk through how he'd build a solution using the tools you've been exposed to so far.

### Object-Oriented Programming (1:00 - 2:00)

Meet up with Jeff in Classroom A to [work on understanding Object-Oriented Programming](https://github.com/turingschool/lesson_plans/blob/master/ruby_01-object_oriented_programming_with_ruby/object_oriented_programming.markdown).

### How Testing Works (2:00 - 3:00)

How does testing even work? Josh Mejia will take over in Classroom A to introduce Minitest.

### Spiraling Design and Tests (3:00 - 4:00)

Then Jeff will finish things up with, guess what? If you said "CREDIT CARD NUMBERS" then you are the BIGGEST WINNER!!

### Homework

Change of plans on homework. Let's push cryptography off for a day.

#### 1. Arrays & Hashes

You need to finish the short exercise from our [morning Arrays & Hashes session](https://github.com/turingschool/lesson_plans/blob/master/ruby_01-object_oriented_programming_with_ruby/arrays_and_hashes.markdown) (~10 minutes)

#### 2. Building a Car

You need to complete the [Car exercise from our afternoon Object-Oriented Programming session](https://github.com/turingschool/lesson_plans/blob/master/ruby_01-object_oriented_programming_with_ruby/object_oriented_programming.markdown) (~30 minutes)

#### 3. Testing Luhn

<img style="float:right; margin: 10px" src='http://timoelliott.com/blog/wp-content/uploads/2014/01/hans-peter-luhn_8b9a8546-48b2-4bf2-9a87-bb7207d93634.jpg' />

Lastly, look at that disapproving smirk from Hans Peter Luhn over there. Who would approve of an implementation of the Luhn algorithm that's not verified by automated tests? Nobody!

Build *a new implementation of the algorithm*, from scratch, using the ideas of *classes* and *tests* you worked on this afternoon. Use the spiraling test cases that we discussed in the final session of the day.

**Submission**: Create a [gist](http://gist.github.com) and add the URL for your Gist to [this MoPad document](https://etherpad.mozilla.org/vTl9MXkatz).
